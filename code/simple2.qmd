---
title: "Simulations with a single SNP & different sample sizes"
format: gfm
---

First, simulate genotype data for 10,000 subjects.

```{r}
library(magrittr)
```

```{r}
set.seed(2023-04-15)
n <- 11000
n_snp <- 1
# simulate genotypes matrix
geno <- matrix(sample(c(0,1,2), n*n_snp, replace=TRUE, prob=c(0.8,0.15,0.05)), nrow=n, ncol=n_snp)
# simulate phenotype
beta <- 0.5
y <- geno %*% beta + rnorm(n)
n_test <- 1000
# get test subject ids
test_ids <- sample(1:n, n_test, replace = FALSE)
# organize data
dat <- tibble::tibble(geno = geno[, 1], pheno = y[, 1], id = 1:n) %>%
    dplyr::mutate(in_test_set = id %in% test_ids)
```

```{r}
training <- dat %>% dplyr::filter(!in_test_set)
testing <- dat %>% dplyr::filter(in_test_set)
testing2 <- testing %>% dplyr::mutate(fold = NA)
```


```{r}
# use all 10,000 training with leave K out
alpha <- 0.1
n_folds <- 5
n_train <- nrow(training)
# partition training data into 5 folds
folds <- split(training$id, sample(rep(1:n_folds, length.out = n_train)))
training2_pre <- training %>% 
    dplyr::mutate(fold = id %>% purrr::map_int(~which(sapply(folds, function(x) . %in% x))))

tl <- list()
for (n_per_fold in c(2000, 20)){
    training2 <- training2_pre %>%
        dplyr::group_by(fold) %>%
        dplyr::slice_sample(n = n_per_fold)

    # regress leaving one fold out
    preds <- list()
    for (k in 1:n_folds) {
        # get training data
        train <- training2 %>% dplyr::filter(fold != k)
        # get testing data
        test <- training2 %>% dplyr::filter(fold == k)
        # fit model
        fit <- lm(pheno ~ geno, data = train)
        # predict
        foo <- test %>% dplyr::bind_rows(testing2)
        foo$pred <- predict(fit, newdata = foo)
        foo$fold_left_out <- k
        # save predictions
        preds[[k]] <- foo
    }
    # assemble predicted values
    # get absolute residuals
    p2 <- preds %>%
        dplyr::bind_rows() %>%
        dplyr::filter(!is.na(fold)) %>%
        dplyr::mutate(absolute_residual = abs(pheno - pred)) %>%
        dplyr::select( - fold_left_out)
    ptest <- preds %>%
        dplyr::bind_rows() %>%
        dplyr::filter(is.na(fold))
    # get indexes
    plus_index <- ceiling((1 - alpha) * (nrow(p2) + 1))
    minus_index <- floor(alpha * (nrow(p2) + 1))

    # go one by one through test set (testing2)
    test_list <- list()
    for (i in 1:nrow(testing2)) {
        tt <- testing2[i, ]
        pt2 <- ptest %>% 
            dplyr::filter(id == tt$id) %>%
            dplyr::rename_with(function(x)paste0("test_", x))
        dd <- p2 %>%
            dplyr::left_join(pt2, by = c("fold" = "test_fold_left_out")) %>%
            dplyr::mutate(test_fitted_plus_absolute_residual = test_pred + absolute_residual, 
                            test_fitted_minus_absolute_residual = test_pred - absolute_residual) 
        uu <- sort(dd$test_fitted_plus_absolute_residual)[plus_index]
        ll <- sort(dd$test_fitted_minus_absolute_residual)[minus_index]
        test_list[[i]] <- tibble::tibble(test_id = tt$id, test_geno = dd$test_geno[1], test_pheno = dd$test_pheno[1], upper = uu, lower = ll)
    }
    test_tib <- test_list %>%
        dplyr::bind_rows() %>%
        dplyr::mutate(in_interval = test_pheno >= lower & test_pheno <= upper) %>%
        dplyr::mutate(interval_width = upper - lower) %>%
        dplyr::mutate(training_set_size = n_per_fold * n_folds)
    tl[[as.character(n_per_fold * n_folds)]] <- test_tib

}
```

```{r}
result <- tl %>%
    dplyr::bind_rows() %>%
    dplyr::group_by(test_id) %>%
    dplyr::arrange(desc(training_set_size)) %>%
    dplyr::summarise(diff_interval_width = interval_width[1] - interval_width[2])
```

